Last login: Thu Feb 26 17:25:13 on ttys000

-------------------------------------------------
If you need to create a platform specific folder using Phonegap, please do the following:
1) First, run the 'echo PATH=$PATH:/Users/francislawrence/Programming/phonegap-2.9.1/lib/<specific_platform>/bin' command.
2) Then, you need to change your working directory to the bin of that platform in that same phonegap folder.
3) Then, run the 'create name com.example.name Name' command.

Also, if you need to change any of these settings, go to your home directory (~) and type ‘nano .bash_profile’.

Also, if you need to do the EMULATE command, you have to go to the app folder and then run ‘ripple emulate’.

To edit the tab control thing, go to nano .inputrc from your root directory.
To substitute something in the previous line, type something like this... ^toreplace^touse
To search previous lines, use Ctrl-R.
To leave that screen you can get stuck in, use q when the END is highlighted.
To learn the escape characters of buttons, first type ^V
Jump to start of line ^A
Jump to end of line ^E
Clear text onward ^K
Clear backward by word ^W
Toggle between current cursor position and start of line ^XX
Clear whole line ^U
Bring last line back ^Y
Search previous lines ^R
! preceding starting character, Enter invokes last command
To modify the last command, type !<firstfewcharacters>:s/<toreplace>/<desired>
Keep Mac awake: $ caffeinate -u -t 600 (add options to set timer)
------------------------------------------------------
04:10:09|~ $ cd Programming/Ruby-Training_l/27_Mastermind/lib/mastermind
04:10:59|mastermind $ irb
irb(main):001:0> load 'game.rb'
SyntaxError: game.rb:90: syntax error, unexpected end-of-input, expecting keyword_end
...turn-unless-return-value-is-nil
...                               ^
	from (irb):1:in `load'
	from (irb):1
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):002:0> load 'game.rb'
=> true
irb(main):003:0> game = Mastermind::Game.new
Welcome to your new game of Mastermind.
This is a two player game. Will the computer be your oponent? [y/n]
n
Are you here to crack the code or make the code? [c/m]
m
What's your name? Example: John Butt
Francis Edmund Lawrence
You made it!
Are you here to crack the code or make the code? [c/m]
m
What's your name? Example: John Butt
Jay Maurice Redd
Right now, the player_hash is {:user_name=>"maurjay", :real_name=>"Jay Maurice Redd", :role=>"MAKER"}. Let's call already_decided.
A_D, currently two is {:user_name=>"maurjay", :real_name=>"Jay Maurice Redd", :role=>"MAKER"}.

Meanwhile, first_hash is {:user_name=>"edmufran", :real_name=>"Francis Edmund Lawrence", :role=>"MAKER"}.
Made two's role BREAKER. See? {:user_name=>"maurjay", :real_name=>"Jay Maurice Redd", :role=>"BREAKER"}.
Thanks a_d, now two is {:user_name=>"maurjay", :real_name=>"Jay Maurice Redd", :role=>"BREAKER"}.
You didn't break it! Fail!
=> #<Mastermind::Game:0x007f7f84107178 @breaker="c", @maker="m", @player_one={:user_name=>"edmufran", :real_name=>"Francis Edmund Lawrence", :role=>"MAKER"}, @player_two={:user_name=>"maurjay", :real_name=>"Jay Maurice Redd", :role=>"BREAKER"}>
irb(main):004:0> hash = {1=>11,2=>22,3=>33}
=> {1=>11, 2=>22, 3=>33}
irb(main):005:0> hash(1,2)
ArgumentError: wrong number of arguments (2 for 0)
	from (irb):5:in `hash'
	from (irb):5
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):006:0> hash[1,2]
ArgumentError: wrong number of arguments (2 for 1)
	from (irb):6:in `[]'
	from (irb):6
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):007:0> hash[1..2]
=> nil
irb(main):008:0> hash.values_at[1,2]
=> nil
irb(main):009:0> hash.values_at(1,2)
=> [11, 22]
irb(main):010:0> two_names = "John Cook"
=> "John Cook"
irb(main):011:0> two_names = ["cojo", "John Cook"]
=> ["cojo", "John Cook"]
irb(main):012:0> first_name = two_names[1].split(" ")[0]
=> "John"
irb(main):013:0> puts "John" + 5.to_s + "Clark"
John5Clark
=> nil
irb(main):014:0> puts "John " + 5.to_s + " Clark"
John 5 Clark
=> nil
irb(main):015:0> exit
05:06:15|mastermind $ puts "\e[1mBold\e[0m"
-bash: puts: command not found
05:06:16|mastermind $ irb
irb(main):001:0> puts "\e[1mBold\e[0m"
Bold
=> nil
irb(main):002:0> puts "R".red
NoMethodError: undefined method `red' for "R":String
	from (irb):2
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):003:0> puts "e[1;33;44mJohne[0m"
e[1;33;44mJohne[0m
=> nil
irb(main):004:0> puts "\e[1;33;44mJohn\e[0m"
John
=> nil
irb(main):005:0> array = [5,6,7]
=> [5, 6, 7]
irb(main):006:0> puts array[0,2]
5
6
=> nil
irb(main):007:0> print array[0,2]
[5, 6]=> nil
irb(main):008:0> printf array[0,2]
ArgumentError: too few arguments
	from (irb):8:in `printf'
	from (irb):8
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):009:0> p array[0,2]
[5, 6]
=> [5, 6]
irb(main):010:0> p array[0,2].to_s
"[5, 6]"
=> "[5, 6]"
irb(main):011:0> puts array[0,2].to_s
[5, 6]
=> nil
irb(main):012:0> puts array[0,2].join
56
=> nil
irb(main):013:0> puts "\e[1;6mR\C[0m"
SyntaxError: (irb):13: Invalid escape character syntax
puts "\e[1;6mR\C[0m"
                ^
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):014:0> puts "\e[1;6mC\e[0m"
C
=> nil
irb(main):015:0> puts "what?"
what?
=> nil
irb(main):016:0> puts "\[1;6mC\e[0m"
[1;6mC
=> nil
irb(main):017:0> puts "\e[1;6C\e[0"

il
irb(main):018:0> puts "\e1;[6mC\e[0m"
;[6mC
=> nil
irb(main):019:0> puts "\e[1;6mC\e[0m"
C
=> nil
irb(main):020:0> puts "\e[1;36mC\e[0m"
C
=> nil
irb(main):021:0> puts "\e[1;2mG\e[0m"
G
=> nil
irb(main):022:0> puts "\e[1;32mG\e[0m\e[1;37mW\e[0m\e[1;33mY\e[0m"
GWY
=> nil
irb(main):023:0> puts "\n1002\n";puts "yo!"

1002
yo!
=> nil
irb(main):024:0> puts "\n1002\n";puts "\nyo!"

1002

yo!
=> nil
irb(main):025:0> puts "\e[1;4;5;31mRemember\e[1;4;31m to not guess any more than 4 letters or the game will crash!\e[0m"
Remember to not guess any more than 4 letters or the game will crash!
=> nil
irb(main):026:0> puts "\e[1;4;5;31mRemember\e[0m\e[1;4;31m to not guess any more than 4 letters or the game will crash!\e[0m"
Remember to not guess any more than 4 letters or the game will crash!
=> nil
irb(main):027:0> puts "\e[1;4;5;31mRemember: \e[0m\e[1;4;31mDo not guess any more than 4 letters or the game will crash!\e[0m"
Remember: Do not guess any more than 4 letters or the game will crash!
=> nil
irb(main):028:0> "\n\nOh, wow, you figured it out!!!! Way to go!!".upcase
=> "\n\nOH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!"
irb(main):029:0> puts "\n\n\e[1;19;33mOh, wow, you figured it out!!!! Way to go!!\e[0m".upcase



=> nil
irb(main):030:0> puts "\n\n\e[19;33mOh, wow, you figured it out!!!! Way to go!!\e[0m".upcase



=> nil
irb(main):031:0> puts "\n\n\e[33mOh, wow, you figured it out!!!! Way to go!!\e[0m".upcase



=> nil
irb(main):032:0> puts "\e[1;4;5;31mRemember: \e[0m\e[1;4;31mDo not guess any more than 4 letters or the game will crash!\e[0m"
Remember: Do not guess any more than 4 letters or the game will crash!
=> nil
irb(main):033:0> puts "blah"
blah
=> nil
irb(main):034:0> puts "\n\n\e[1;4;5;31mRemember: \e[0m\e[1;4;31mDo not guess any more than 4 letters or the game will crash!\e[0m"


Remember: Do not guess any more than 4 letters or the game will crash!
=> nil
irb(main):035:0> puts "\n\n\e[3;3mOh, wow, you figured it out!!!! Way to go!!\e[0m".upcase



=> nil
irb(main):036:0> puts "\n\n\e[33;mOh, wow, you figured it out!!!! Way to go!!\e[0m".upcase



=> nil
irb(main):037:0> puts "\n\n\e[33mOh, wow, you figured it out!!!! Way to go!!\e[0m"


Oh, wow, you figured it out!!!! Way to go!!
=> nil
irb(main):038:0> puts "\n\n\e[1;19;33mOh, wow, you figured it out!!!! Way to go!!\e[0m"


Oh, wow, you figured it out!!!! Way to go!!
=> nil
irb(main):039:0> puts "\n\n\e[1;17;33mOh, wow, you figured it out!!!! Way to go!!\e[0m"


Oh, wow, you figured it out!!!! Way to go!!
=> nil
irb(main):040:0> puts "\n\n\e[1;33m"+"Oh, wow, you figured it out!!!! Way to go!!".upcase+"\e[0m"


OH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!
=> nil
irb(main):041:0> puts "\n\n\e[1;33;52m"+"Oh, wow, you figured it out!!!! Way to go!!".upcase+"\e[0m"


OH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!
=> nil
irb(main):042:0> puts "\n\n\e[1;4;33;53m"+"Oh, wow, you figured it out!!!! Way to go!!".upcase+"\e[0m"


OH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!
=> nil
irb(main):043:0> puts "\n\n\e[1;4;33m"+"Oh, wow, you figured it out!!!! Way to go!!".upcase+"\e[0m"


OH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!
=> nil
irb(main):044:0> puts "b*"
b*
=> nil
irb(main):045:0> puts "b**"
b**
=> nil
irb(main):046:0> puts "\e[1;2;3mSorry for your loss,"
Sorry for your loss,
=> nil
irb(main):047:0> puts "\n\n\e[1;4;33m"+"Oh, wow, you figured it out!!!! Way to go!!".upcase+"\e[0m"


OH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!
=> nil
irb(main):048:0> puts "\e[1;21;37mSorry for your loss,\e[0m"
Sorry for your loss,
=> nil
irb(main):049:0> puts "\e[37mSorry for your loss,\e[0m"
Sorry for your loss,
=> nil
irb(main):050:0> puts "Sorry for your loss"
Sorry for your loss
=> nil
irb(main):051:0> puts "\e[36mSorry for your loss,\e[0m"
Sorry for your loss,
=> nil
irb(main):052:0> puts "\e[33mSorry for your loss,\e[0m"
Sorry for your loss,
=> nil
irb(main):053:0> puts "\e[1;33mSorry for your loss,\e[0m"
Sorry for your loss,
=> nil
irb(main):054:0> puts "\e[1;36mSorry for your loss,\e[0m"
Sorry for your loss,
=> nil
irb(main):055:0> puts "\n\n\n\n\e[1;4;33mOH, \e[36WOW, \e[33YOU FIGURED IT OUT!!!! WAY TO GO!!!!\e[0m"




OH, OW, OU FIGURED IT OUT!!!! WAY TO GO!!!!
=> nil
irb(main):056:0> puts "\n\n\n\n\e[1;4;33mOH, \e[36mWOW, \e[33mYOU FIGURED IT OUT!!!! WAY TO GO!!!!\e[0m"




OH, WOW, YOU FIGURED IT OUT!!!! WAY TO GO!!!!
=> nil
irb(main):057:0> hash
=> 126704832449878245
irb(main):058:0> hash = Hash.new
=> {}
irb(main):059:0> hash = {1: "a", 2: "b", 3: "c", 4: "d"}
SyntaxError: (irb):59: syntax error, unexpected ':', expecting =>
hash = {1: "a", 2: "b", 3: "c", 4: "d"}
          ^
(irb):59: syntax error, unexpected ',', expecting end-of-input
hash = {1: "a", 2: "b", 3: "c", 4: "d"}
               ^
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):060:0> hash = {1: "a" 2: "b", 3: "c", 4: "d"}
SyntaxError: (irb):60: syntax error, unexpected ':', expecting =>
hash = {1: "a" 2: "b", 3: "c", 4: "d"}
          ^
(irb):60: syntax error, unexpected tINTEGER, expecting end-of-input
hash = {1: "a" 2: "b", 3: "c", 4: "d"}
                ^
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):061:0> hash = {1 => "a", 2 => "b", 3 => "c", 4 => "d"}
=> {1=>"a", 2=>"b", 3=>"c", 4=>"d"}
irb(main):062:0> hash.to_s
=> "{1=>\"a\", 2=>\"b\", 3=>\"c\", 4=>\"d\"}"
irb(main):063:0> hash
=> {1=>"a", 2=>"b", 3=>"c", 4=>"d"}
irb(main):064:0> puts hash
{1=>"a", 2=>"b", 3=>"c", 4=>"d"}
=> nil
irb(main):065:0> hash[1] = ["a","b","c","d"]
=> ["a", "b", "c", "d"]
irb(main):066:0> hash
=> {1=>["a", "b", "c", "d"], 2=>"b", 3=>"c", 4=>"d"}
irb(main):067:0> hash[2] = ["e","f","g","h"]
=> ["e", "f", "g", "h"]
irb(main):068:0> hash
=> {1=>["a", "b", "c", "d"], 2=>["e", "f", "g", "h"], 3=>"c", 4=>"d"}
irb(main):069:0> hash[3] = ["i","j","k","l"]
=> ["i", "j", "k", "l"]
irb(main):070:0> hash
=> {1=>["a", "b", "c", "d"], 2=>["e", "f", "g", "h"], 3=>["i", "j", "k", "l"], 4=>"d"}
irb(main):071:0> puts "yo\n\n"; puts "thanks"
yo

thanks
=> nil
irb(main):072:0> hash
=> {1=>["a", "b", "c", "d"], 2=>["e", "f", "g", "h"], 3=>["i", "j", "k", "l"], 4=>"d"}
irb(main):073:0> hash.each do |key,value|
irb(main):074:1* 
code.rb        codebreaker.rb codemaker.rb   game.rb        guess.rb      
irb(main):074:1* 
code.rb        codebreaker.rb codemaker.rb   game.rb        guess.rb      
irb(main):074:1* 
code.rb        codebreaker.rb codemaker.rb   game.rb        guess.rb      
irb(main):074:1* puts "#{key} : #{value}"
irb(main):075:1> 
code.rb        codebreaker.rb codemaker.rb   game.rb        guess.rb      
irb(main):075:1> 
code.rb        codebreaker.rb codemaker.rb   game.rb        guess.rb      
irb(main):075:1> 
code.rb        codebreaker.rb codemaker.rb   game.rb        guess.rb      
irb(main):075:1> hash.each do |key,value|
irb(main):076:2* puts "#{key} : #{value}"
irb(main):077:2> end
irb(main):078:1> end
1 : ["a", "b", "c", "d"]
1 : ["a", "b", "c", "d"]
2 : ["e", "f", "g", "h"]
3 : ["i", "j", "k", "l"]
4 : d
2 : ["e", "f", "g", "h"]
1 : ["a", "b", "c", "d"]
2 : ["e", "f", "g", "h"]
3 : ["i", "j", "k", "l"]
4 : d
3 : ["i", "j", "k", "l"]
1 : ["a", "b", "c", "d"]
2 : ["e", "f", "g", "h"]
3 : ["i", "j", "k", "l"]
4 : d
4 : d
1 : ["a", "b", "c", "d"]
2 : ["e", "f", "g", "h"]
3 : ["i", "j", "k", "l"]
4 : d
=> {1=>["a", "b", "c", "d"], 2=>["e", "f", "g", "h"], 3=>["i", "j", "k", "l"], 4=>"d"}
irb(main):079:0> hash.each {|key,value| puts "#{key} : #{value}"}
1 : ["a", "b", "c", "d"]
2 : ["e", "f", "g", "h"]
3 : ["i", "j", "k", "l"]
4 : d
=> {1=>["a", "b", "c", "d"], 2=>["e", "f", "g", "h"], 3=>["i", "j", "k", "l"], 4=>"d"}
irb(main):080:0> billy = gets
a,d, e e i oeie
=> "a,d, e e i oeie\n"
irb(main):081:0> billy = gets.chomp
a,d, e e i oeie
=> "a,d, e e i oeie"
irb(main):082:0> billy.match(a)
NameError: undefined local variable or method `a' for main:Object
	from (irb):82
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):083:0> billy.match("a")
=> #<MatchData "a">
irb(main):084:0> billy.match(/(([a-z]).*){4})
irb(main):085:1/ )
irb(main):086:1/ )
irb(main):087:1/ /
irb(main):088:1> )
SyntaxError: (irb):87: unmatched close parenthesis: /(([a-z]).*){4})
)
)
/
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):089:0> billy.match(/(([a-z]).*){4}/)
=> #<MatchData "a,d, e e i oeie" 1:"e" 2:"e">
irb(main):090:0> billy.match(/(([a..z]).*){4}/)
=> nil
irb(main):091:0> billy
=> "a,d, e e i oeie"
irb(main):092:0> billy.match(/((e).*){4}/)
=> #<MatchData "e e i oeie" 1:"e" 2:"e">
irb(main):093:0> billy.match(/((e).*)/)
=> #<MatchData "e e i oeie" 1:"e e i oeie" 2:"e">
irb(main):094:0> billy.match(/((e)(.*)){4}/)
=> #<MatchData "e e i oeie" 1:"e" 2:"e" 3:"">
irb(main):095:0> billy.scan(/((e)(.*)){4}/)
=> [["e", "e", ""]]
irb(main):096:0> billy.scan(/[a,b,c,d,e]{4})
irb(main):097:1/ /)
SyntaxError: (irb):97: unmatched close parenthesis: /[a,b,c,d,e]{4})
/
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):098:0> billy.scan(/[a,b,c,d,e]{4}/)
=> ["a,d,"]
irb(main):099:0> billy
=> "a,d, e e i oeie"
irb(main):100:0> billy.scan(/[a,b,c,d,e]*{4}/)
=> ["a,d,", "", "e", "", "e", "", "", "", "", "e", "", "e", ""]
irb(main):101:0> billy.scan(/([a,b,c,d,e]\W*)*{4}/)
=> [["e "], [nil], [nil], [nil], ["e"], [nil], ["e"], [nil]]
irb(main):102:0> billy.scan(/([a,b,c,d,e][\W,\S]*)*{4}/)
=> [["a,d, e e i oeie"], [nil]]
irb(main):103:0> billy.scan(/([a,b,c,d,e]\W*\S)*{4}/)
=> [[", e"], [nil], ["e i"], [nil], [nil], ["ei"], [nil], [nil]]
irb(main):104:0> billy.scan(/([a,b,c,d,e])([a,b,c,d,e])([a,b,c,d,e])/)
=> [["a", ",", "d"]]
irb(main):105:0> billy
=> "a,d, e e i oeie"
irb(main):106:0> billy.scan(/([a,b,c,d,e]).*([a,b,c,d,e]).*([a,b,c,d,e])/)
=> [["a", "e", "e"]]
irb(main):107:0> billy.scan(/([a..e]).*([a..e]).*([a..e])/)
=> [["a", "e", "e"]]
irb(main):108:0> billy.scan(/[a..e].*[a..e].*[a..e]/)
=> ["a,d, e e i oeie"]
irb(main):109:0> billy.match(/[a..e].*[a..e].*[a..e]/)
=> #<MatchData "a,d, e e i oeie">
irb(main):110:0> billy.match(/(([a..f]).*){3}/)
=> nil
irb(main):111:0> billy.scan(/([a..e]).*([a..e]).*([a..e])/)
=> [["a", "e", "e"]]
irb(main):112:0> bob = billy.scan(/([a..e]).*([a..e]).*([a..e])/)
=> [["a", "e", "e"]]
irb(main):113:0> bob[0]
=> ["a", "e", "e"]
irb(main):114:0> billy.scan(/([a..e]).*([a..e]).*([a..e])/)[0].join
=> "aee"
irb(main):115:0> hash
=> {1=>["a", "b", "c", "d"], 2=>["e", "f", "g", "h"], 3=>["i", "j", "k", "l"], 4=>"d"}
irb(main):116:0> hash.values
=> [["a", "b", "c", "d"], ["e", "f", "g", "h"], ["i", "j", "k", "l"], "d"]
irb(main):117:0> puts "this is false" unless i == i
NameError: undefined local variable or method `i' for main:Object
	from (irb):117
	from /Users/francislawrence/.rbenv/versions/2.2.0/bin/irb:11:in `<main>'
irb(main):118:0> puts "this is false" unless 6 == 6
=> nil
irb(main):119:0> 
